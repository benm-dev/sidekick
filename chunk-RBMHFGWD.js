import{a,e as p,f as A,g,h as l,n as u}from"./chunk-QGLCH3FC.js";import{f as c,h as f,i as M,l as i}from"./chunk-LGMSABOQ.js";c();var y=null,k=()=>(i(y,"You should call `getClientInfo()` method synchronously in gateway api"),y),d=r=>{y=r};c();c();var h=r=>{r instanceof Promise&&r.catch(a)};var x=(r,t)=>t.reduce((e,n)=>(i(f(e)&&M(e,n),"Failed to get name from access chain: object in chain is not an object or does not have name property"),e[n]),r),w=class{api;postMessage;canProcessMessage;storeSubscriptions=new Map;queueForProcess=new Set;proxiesById=new Map;constructor({api:t,postMessage:e,canProcessMessage:n}){this.api=t,this.postMessage=e,this.canProcessMessage=n,g(this.api,s=>{this.api=s,this.queueForProcess.forEach(o=>this.processMessage(o)),this.queueForProcess.clear()})}processMessage(t){if(A(this.api)){this.queueForProcess.add(t);return}if(!(this.canProcessMessage&&!this.canProcessMessage(t)))try{switch(d(t.client),t.type){case"CALL_ACTION":{let e=x(this.api.actions,t.accessChain);h(e(...this.deserializeArguments(t.argumentList,t.client)));break}case"QUERY":{let e=x(this.api.queries,t.accessChain);Promise.resolve(e(...this.deserializeArguments(t.argumentList,t.client))).then(n=>{this.postMessage({type:"QUERY_RESOLVE",queryId:t.queryId,value:n,client:t.client})},n=>{this.postMessage({type:"QUERY_REJECT",queryId:t.queryId,error:n,client:t.client})});break}case"SUBSCRIBE_START":{let e=t.name,n=this.api.stores[e],s=l(t.client);i(n,`Client tried to subscribe non-existed store "${e}"`);let o=p(this.storeSubscriptions,s,new Map),m=o.get(e);m&&m();let b=P=>{this.postMessage({type:"SUBSCRIBE_UPDATE",name:e,value:P,client:t.client})},C=typeof n=="function"?n(b):n.subscribe(b);o.set(e,C);break}case"SUBSCRIBE_END":{let e=t.name,n=l(t.client),s=p(this.storeSubscriptions,n,new Map),o=s.get(e);i(o,`Client already unsubscribed from store "${e}"`),o(),s.delete(e);break}case"PROXY_CALL":{let e=this.proxiesById.get(t.proxyId);i(e,`Client tried call unknown proxy with id: "${t.proxyId}"`),h(e.fn(...this.deserializeArguments(t.argumentList,t.client)));break}default:}}catch(e){a(e)}finally{d(null)}}clearByClientId(t){let e=p(this.storeSubscriptions,t,new Map);e.forEach(n=>n()),e.clear()}serializeArguments(t){return t.map(e=>u(e)?(this.proxiesById.set(e.id,e),e.claim(()=>this.proxiesById.delete(e.id)),{type:"proxy",id:e.id}):e)}deserializeArguments(t,e){return t.map(n=>u(n)?(...s)=>{this.postMessage({type:"PROXY_CALL",proxyId:n.id,argumentList:this.serializeArguments(s),client:e})}:n)}};export{h as a,k as b,w as c};

